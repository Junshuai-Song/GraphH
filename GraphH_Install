GraphH的设计共分为4层：
	物理设计：顶点表、边表、消息表
	驱动控制器：coordinator
	tableUDF：表函数
	Compute：顶点计算函数
我们将按照层次的顺序，来建立起我们的第一个GraphH框架程序。


GraphH安装步骤(以shortestPath算法为例)
1. 物理设计：
	建立一个新的数据库graphh并进入
	执行src/physical/physical.sql，在数据库中建立需要的表结构与数据类型结构
	执行src/physical/shortpath_data.sql，在顶点表和边表中加入相应测试数据
2. 安装GraphH驱动控制器
	执行src/coordinator/coordinator.sql，在建立的数据库中建立驱动控制器函数，它是一个pl/pgsql函数
3. 安装表函数
	进入目录src/tableudf/
	确认makefile文件中MODULES属性等于shortpath_tableudf
	执行make
	执行make install，查看dos提示安装路径INSTALL_PATH
	在数据库中执行：
		CREATE OR REPLACE FUNCTION graphh_state(TEXT, TEXT)
		RETURNS TEXT AS
		INSTALL_PATH, 'graphh_state'
		LANGUAGE c ;

		CREATE OR REPLACE FUNCTION graphh_merge(TEXT, TEXT)
		RETURNS TEXT AS
		INSTALL_PATH, 'graphh_merge'	
		LANGUAGE c ;

		CREATE AGGREGATE graphh_append(TEXT)
		(
			sfunc = graphh_state,
			prefunc = graphh_merge,
			stype = text,
			INITCOND = ''
		);

		CREATE OR REPLACE FUNCTION shortpath_tableudf(int, graphh_value,TEXT)
		RETURNS setof vertex_ AS
		INSTALL_PATH, 'shortpath_tableudf'
		LANGUAGE c STRICT;
	注意其中INSTALL_PATH路径，会在执行make install命令之后，在dos界面上显示出来，这和你HAWQ数据库的配置有关。
	更多在HAWQ中创建C-Language函数的信息请参考PostgreSQL官方文档。
4. 运行测试：
	在数据库中运行：select graphh_shortpath(30); 
	select *from vertex; 观察运行结果
	
	
	
